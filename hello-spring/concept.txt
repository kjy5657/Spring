Maven
Gradle : 버전 설정하고 라이브러리 떙겨옴, 자세히 알 필요는 없음

요즘에는 Gradle을 많이 씀

Snapshot,M1은 정식 출시 아님

java 파일 제외 다 resources , config file 등등

build.gradle : 설정 파일

dependencies : mavenCentral(repositories)이라는 사이트에서 다운로드 받는 것

settings에서 gradle검색, build, run using : IntellJ IDEA로 바꾸기

gradle이 의존관계를 다 관리해줌, 내가 가져오는것은 spring-boot-starter-web만 필요하다고 했어도, gradle에서 자동으로 spring-boot-starter-web이 필요한 의존관계를 모두 다운받음

spirng-boot-starter-tomcat
	소스 라이브러리에서 웹서버를 들고 있는(임베디드) 느낌
	
출력은 항상 log로 해야 심각한 에러만 따로 모아보거나 로그파일 관리가 가능
System.out.println()는 별로 안씀 


./graldew clean : build 폴더 사라짐
./graldew clean build : build 완전히 지우고 다시 빌드

정적 컨텐츠
    File을 그대로 Client에게 보내는 것
    Spring에서 기본적으로 제공(/resources/static)
    ex) static 폴더 내부에 a.html이 있으면,
        localhost:port/a.html 들어가면 가능

MVC, 템플릿 엔진
    서버에서 프로그래밍해서 HTML을 동적으로 바꿔서 Client에게 보내는 것

API
    Client가 모바일(안드로이드, IOS)인 경우 JSON 구조 포맷으로 Client에게 전달
    화면은 Client가 알아서 렌더링하고, data만 보내줌
    서버끼리 통신하는 경우

View
    화면을 렌더링하는데 집중

Model
    Data 접근

Controller
    URL, business logic

테스트 순서는 보장되지 않음, 순서에 의존적으로 설계하면 안됨

테스트 주도 개발(TDD)
    테스트 코드를 짠 다음에 그 틀에 맞추어서 개발

서비스 클래스는 비즈니스에 가까운 용어를 사용해야 함
    레포지토리는 단순히 기계적으로 개발스럽게 용어 선택
    롤에 맞도록 네이밍

테스트는 영어권 사람들과 일하는 게 아니면, 한글로도 적어도 됨

테스트 케이스 작성 시, given when then 주석 쓰고 적어보기

Spring Bean
    스프링 컨테이너가 객체를 생성해서 가지고 있음
    Controller 에서 객체를 생성하면, 여러 군데에서 공용으로 사용할 수 없음

    스프링 컨테이너가 객체를 생성할 때, 생성자를 호출,
    @Autowired : 스프링이 가지고 있는 객체를 연결시켜줌 -> Dependency Injection
    같은 스프링 빈이면 모두 같은 하나의 인스턴스 사용(싱글톤)

    Component Scan
        @ Annotation을 이용해서, Spring에 등록, Spring이 관리
        @SpringBootApplication Annotation이 있는 package 하위만 컴포넌트 스캔 진행
        이 예시에서는 hello.hellospring package에 들어 있는 것만 검사하는 것
        설정할 수는 있지만, 기본적으로는 탐색 대상이 아님

    자바 코드로 직접 스프링 빈 등록 가능
        @Bean 사용
        Controller는 어쩔 수 없음, 어차피 스프링이 관리

    Dependency Injection

    Field Injection
        내가 바꾸고 싶은 데로 바꿀 수 없음
        비권장

    Setter Injection
        Setter를 통해서 주입
        public이므로, Application 중간에 수정될 여지 있음
        보안 위험

    Constructor Injection
        Spring 조립되는 시점에 설정된 이후 변경 못하도록 할 수 있음

    상황에 따라 구현 클래스가 변경되는 경우 Spring Bean 사용

정적파일보다 컨트롤러가 우선순위가 더 높음
    컨트롤러에서 먼저 탐색, 매칭되는 게 있으면 거기로 맵핑